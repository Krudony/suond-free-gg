import sys
import base64
import json
import requests
import tempfile
import os
import time
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLineEdit, QPushButton, QLabel, QFileDialog, QMessageBox
)
from PySide6.QtCore import Qt

class TextToSpeechApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.api_key = None
        self.audio_data = None
        self.initUI()

    def initUI(self):
        self.setWindowTitle('AI Studio Thai Text-to-Speech Generator')
        self.setMinimumWidth(600)

        # Create central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # File selection
        file_layout = QHBoxLayout()
        self.file_path = QLineEdit()
        self.file_path.setPlaceholderText("Select text file...")
        browse_btn = QPushButton("Browse")
        preview_btn = QPushButton("Preview Text")
        file_layout.addWidget(self.file_path)
        file_layout.addWidget(browse_btn)
        file_layout.addWidget(preview_btn)
        layout.addLayout(file_layout)

        # API Key input
        api_layout = QHBoxLayout()
        self.api_input = QLineEdit()
        self.api_input.setPlaceholderText("Enter AI Studio API Key...")
        self.api_input.setEchoMode(QLineEdit.EchoMode.Password)
        validate_btn = QPushButton("Validate API")
        api_layout.addWidget(self.api_input)
        api_layout.addWidget(validate_btn)
        layout.addLayout(api_layout)

        # Generate and Save buttons
        btn_layout = QHBoxLayout()
        self.generate_btn = QPushButton("Generate Speech with AI Studio TTS")
        self.save_btn = QPushButton("Save Audio")
        btn_layout.addWidget(self.generate_btn)
        btn_layout.addWidget(self.save_btn)
        layout.addLayout(btn_layout)

        # Status label
        self.status_label = QLabel("")
        layout.addWidget(self.status_label)

        # Connect signals
        browse_btn.clicked.connect(self._browse_file)
        preview_btn.clicked.connect(self._preview_text)
        validate_btn.clicked.connect(self._validate_api)
        self.generate_btn.clicked.connect(self._generate_speech)
        self.save_btn.clicked.connect(self._save_audio)

        # Initial state
        self.save_btn.setEnabled(False)
        self._applyStyle()

    def _validate_api(self):
        api_key = self.api_input.text().strip()
        if not api_key:
            QMessageBox.warning(self, "Error", "Please enter an API key")
            return

        try:
            # Test API key with a simple request using the correct endpoint
            url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
            headers = {
                "Content-Type": "application/json"
            }
            params = {
                "key": api_key
            }
            data = {
                "contents": [{
                    "parts":[{
                        "text": "Say hello in Thai"
                    }]
                }]
            }
            
            response = requests.post(url, headers=headers, params=params, json=data)
            
            if response.status_code == 200:
                self.api_key = api_key
                QMessageBox.information(self, "Success", "AI Studio API key is valid!")
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")

        except Exception as e:
            QMessageBox.critical(self, "Error", f"Invalid API key: {str(e)}")

    def _generate_speech(self):
        if not self.api_key:
            QMessageBox.warning(self, "Error", "Please enter and validate API key first")
            return

        file_path = self.file_path.text()
        if not file_path:
            QMessageBox.warning(self, "Error", "Please select a text file")
            return

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                text = file.read().strip()

            if not text:
                QMessageBox.warning(self, "Error", "Text file is empty")
                return

            # Limit text length for API
            if len(text) > 5000:
                text = text[:5000]
                QMessageBox.information(self, "Info", "Text was truncated to 5000 characters for TTS processing")

            # Update UI state
            self.status_label.setText("Generating speech with AI Studio TTS...")
            self.status_label.setStyleSheet("color: #FFA500")  # Orange color
            self.generate_btn.setEnabled(False)
            self.save_btn.setEnabled(False)
            QApplication.processEvents()

            # Use AI Studio TTS API (Gemini 2.5 TTS)
            url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent"
            headers = {
                "Content-Type": "application/json"
            }
            params = {
                "key": self.api_key
            }
            
            # Prepare TTS request data
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"Generate Thai speech for the following text: {text}"
                    }]
                }],
                "generationConfig": {
                    "responseModalities": ["AUDIO"],
                    "speechConfig": {
                        "voiceConfig": {
                            "prebuiltVoiceConfig": {
                                "voiceName": "Kore"
                            }
                        }
                    }
                }
            }
            
            # Make TTS request
            response = requests.post(url, headers=headers, params=params, json=data, timeout=60)
            
            if response.status_code == 200:
                response_data = response.json()
                
                # Extract audio data from response
                if ('candidates' in response_data and 
                    len(response_data['candidates']) > 0 and
                    'content' in response_data['candidates'][0] and
                    'parts' in response_data['candidates'][0]['content'] and
                    len(response_data['candidates'][0]['content']['parts']) > 0):
                    
                    part = response_data['candidates'][0]['content']['parts'][0]
                    
                    if 'inlineData' in part and 'data' in part['inlineData']:
                        # Decode base64 audio data
                        audio_base64 = part['inlineData']['data']
                        self.audio_data = base64.b64decode(audio_base64)
                        
                        if len(self.audio_data) > 1000:  # Check if we have substantial audio data
                            self.status_label.setText("AI Studio TTS speech generated successfully!")
                            self.status_label.setStyleSheet("color: #00FF00")  # Green color
                            self.save_btn.setEnabled(True)
                        else:
                            raise Exception("Generated audio data is too small")
                    else:
                        raise Exception("No audio data found in API response")
                else:
                    raise Exception("Invalid response format from AI Studio TTS API")
            else:
                error_msg = f"AI Studio TTS API Error: {response.status_code}"
                if response.text:
                    try:
                        error_data = response.json()
                        if 'error' in error_data:
                            error_msg += f" - {error_data['error'].get('message', response.text)}"
                    except:
                        error_msg += f" - {response.text}"
                raise Exception(error_msg)

        except Exception as e:
            self.status_label.setText("Error generating speech")
            self.status_label.setStyleSheet("color: #FF0000")  # Red color
            QMessageBox.critical(self, "Error", f"AI Studio TTS Error: {str(e)}")
        finally:
            self.generate_btn.setEnabled(True)

    def _browse_file(self):
        file_name, _ = QFileDialog.getOpenFileName(
            self,
            "Select Text File",
            "",
            "Text Files (*.txt)"
        )
        if file_name:
            self.file_path.setText(file_name)

    def _preview_text(self):
        file_path = self.file_path.text()
        if not file_path:
            QMessageBox.warning(self, "Error", "Please select a text file first")
            return

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                text = file.read()
            QMessageBox.information(self, "Text Preview", text)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Could not read file: {str(e)}")

    def _save_audio(self):
        if not self.audio_data:
            QMessageBox.warning(self, "Error", "No audio data to save")
            return

        try:
            file_name, _ = QFileDialog.getSaveFileName(
                self,
                "Save Audio File",
                "speech_output.wav",
                "Audio Files (*.wav *.mp3)"
            )
            
            if file_name:
                # Determine file extension
                if file_name.lower().endswith('.mp3'):
                    # Save as MP3 (if the data is already in MP3 format)
                    with open(file_name, 'wb') as f:
                        f.write(self.audio_data)
                else:
                    # Save as WAV (default)
                    if not file_name.lower().endswith('.wav'):
                        file_name += '.wav'
                    
                    # AI Studio TTS returns PCM data, convert to WAV format
                    import wave
                    
                    with wave.open(file_name, 'wb') as wav_file:
                        wav_file.setnchannels(1)  # Mono
                        wav_file.setsampwidth(2)  # 16-bit
                        wav_file.setframerate(24000)  # 24kHz sample rate
                        wav_file.writeframes(self.audio_data)
                
                QMessageBox.information(self, "Success", f"Audio saved to: {file_name}")
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Could not save audio: {str(e)}")

    def _applyStyle(self):
        # Dark theme
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QWidget {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QLineEdit {
                background-color: #404040;
                border: 2px solid #555555;
                border-radius: 5px;
                padding: 8px;
                font-size: 12px;
                color: #ffffff;
            }
            QLineEdit:focus {
                border-color: #0078d4;
            }
            QPushButton {
                background-color: #0078d4;
                border: none;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 12px;
                font-weight: bold;
                color: #ffffff;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #555555;
                color: #888888;
            }
            QLabel {
                font-size: 12px;
                padding: 5px;
            }
        """)

def main():
    app = QApplication(sys.argv)
    window = TextToSpeechApp()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
